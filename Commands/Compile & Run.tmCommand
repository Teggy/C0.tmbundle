<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>autoScrollOutput</key>
	<true/>
	<key>beforeRunningCommand</key>
	<string>saveModifiedFiles</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby 

require ENV['TM_SUPPORT_PATH'] + '/lib/textmate'
require ENV['TM_SUPPORT_PATH'] + '/lib/tm/save_current_document'
require ENV['TM_SUPPORT_PATH'] + '/lib/tm/process'


def linkify(t)
  out = []
  t.lines.each do |line|
    # error messages: &lt;file&gt;:&lt;line&gt;.&lt;col&gt;-&lt;line&gt;.&lt;col&gt;:&lt;msg&gt;
    # we place the cursor after the error location
    if line =~ /^(.*):([0-9]+)\.([0-9]+)-([0-9]+)\.([0-9]+):(.*)$/  
      out &lt;&lt; "&lt;a href=\"txmt://open?url=file://#{e_url($1)}&amp;line=#{$4}&amp;column=#{$5}\"&gt;#{File.basename $1}:#{$2}.#{$3}-#{$4}.#{$5}&lt;/a&gt;: #{$6}\n"
    else
      out &lt;&lt; line
    end
  end
  out.join
end

# save the current document
TextMate.save_current_document

# you can use variable TM_C0_CC0 to select a specific CC0 compiler
cc0 = ENV['TM_C0_CC0'] || 'cc0'
TextMate::require_cmd(cc0)

# source file is saved, so TM_FILEPATH, TM_DISPLAYNAME really should be set, but...
TextMate::require_env_var('TM_FILEPATH', "Did you already save your file/project to disk?")
TextMate::require_env_var('TM_DISPLAYNAME', "Did you already save your file/project to disk?")

# name of generated C0 executable 
C0_EXEC_NAME = [ENV['TM_DISPLAYNAME'], Process.pid].join('-')

# number of seconds after which we kill C0 or a stray executable
C0_MAX_TIME = 5

# cc0 options
options = ['-d',               # enable dynamic checks
           '-x',               # execute compiled file
           '-o', C0_EXEC_NAME, # name of executable
          ]

# ensure working directory for C0 compiler is location of source file
Dir.chdir(File.dirname ENV['TM_FILEPATH'])

rout, wout = IO.pipe
rerr, werr = IO.pipe

pid = 0

# run the C0 compiler in a seperate thread
c0 = Thread.new {
  pid = Process.fork {
    STDOUT.reopen(wout)
    STDERR.reopen(werr)
    
    Process.exec(cc0, *(options &lt;&lt; ENV['TM_FILEPATH']))
  }
  Process.wait(pid)
  Thread.exit
}

puts '&lt;pre&gt;'

unless c0.join(C0_MAX_TIME)
    Thread.kill(c0)
    `killall -KILL #{C0_EXEC_NAME}`
    puts "&lt;span style='color: red'&gt;‚ùå Killed C0 (time exceeded)&lt;/span&gt;"
else
  wout.close
  werr.close
  out, err = rout.read, rerr.read
  
  if err.empty?
    puts out
  else
    puts linkify(out) unless out.empty?
    puts "&lt;span style='color: red'&gt;üî¥ #{linkify(err)}&lt;/span&gt;"
  end
end

puts '&lt;/pre&gt;'

TextMate::exit_show_html

</string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>@r</string>
	<key>name</key>
	<string>Compile &amp; Run</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>html</string>
	<key>outputLocation</key>
	<string>newWindow</string>
	<key>scope</key>
	<string>source.c0</string>
	<key>uuid</key>
	<string>7CE37B51-DB08-4116-B37B-7B3B9A824E27</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
