<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>c0</string>
		<string>h0</string>
	</array>
	<key>firstLineMatch</key>
	<string>-[*]-( Mode:)? C0 -[*]-</string>
	<key>keyEquivalent</key>
	<string>^~C</string>
	<key>name</key>
	<string>C0</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(if|else|while|for|continue|break|return|assert|alloc|alloc_array)\b</string>
			<key>name</key>
			<string>keyword.control.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(void|typedef|(bool|char|int|string|struct)(\s*\[\s*\])*)</string>
			<key>name</key>
			<string>storage.type.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(NULL|true|false)\b</string>
			<key>name</key>
			<string>constant.language.c</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(0|[1-9][0-9]*|0[xX][0-9a-fA-F]+)\b</string>
			<key>name</key>
			<string>constant.numeric.c</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#esc</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#esc</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(use)\b\s+</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.include.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$</string>
			<key>name</key>
			<string>meta.preprocessor.c.include</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.include.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>&lt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.lt-gt.include.c</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(file_t|args_t|image_t)\b</string>
			<key>name</key>
			<string>support.type.lib.c0</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#block</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x)
    		(?:  ^                                 # begin-of-line
    		  |  
    		     (?: (?= \s )           (?&lt;!else|return) (?&lt;=[\w\[\]])      #  or word + space before name
    		     )
    		)
    		(\s*) (?!(while|for|if|else|return)\s*\()
    		(
    			(?: [A-Za-z_][A-Za-z0-9_]*+)++                  # actual name
    		)
    		 \s*(?=\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.function.leading.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.c</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})|(?=#)|(;)</string>
			<key>name</key>
			<string>meta.function.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#contracts</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parens</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.variable-access.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.dot-access.c</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\.|-&gt;)([a-zA-Z_][a-zA-Z_0-9]*)\b(?!\s*\()</string>
		</dict>
		<key>block</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.block.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.section.block.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.c</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#block_innards</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>block_innards</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#access</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#libc0</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#c_function_call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#contracts</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<key>c_function_call</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.function-call.leading.c</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.any-method.c</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.c</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x) (?: (?= \s )  (?:(?&lt;=ensures|requires|assert|loop_invariant|else|return) | (?&lt;!\w)) (\s+))?
			(\b 
				(?!(while|for|if|else|return)\s*\()(?:[A-Za-z_][A-Za-z0-9_]*+\b)++                  # actual name
			)
			 \s*(\()</string>
			<key>name</key>
			<string>meta.function-call.c</string>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*/.*\n</string>
					<key>name</key>
					<string>invalid.illegal.stray-comment-end.c</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.c++</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.c++</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\n</string>
							<key>name</key>
							<string>comment.line.double-slash.c++</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>contract</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.new.contract.c0</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=@)\s*\b(requires|ensures|assert|loop_invariant)\b</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.contract.c0</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=@)\s*(\w+)</string>
				</dict>
			</array>
		</dict>
		<key>contract_function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(length|result|old)</string>
					<key>name</key>
					<string>support.function.contract.c0</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\\w+</string>
					<key>name</key>
					<string>invalid.illegal.contract.c0</string>
				</dict>
			</array>
		</dict>
		<key>contracts</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(//@)</string>
					<key>beginCaptures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>comment.line.contract.c0</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#contract</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#contract_function</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#block_innards</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*@</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>comment.block.contract.c0</string>
						</dict>
					</dict>
					<key>end</key>
					<string>@\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>comment.block.contract.c0</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#contract</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#contract_function</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#block_innards</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>esc</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[ntvbrfa'"])</string>
					<key>name</key>
					<string>constant.character.escape.c</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.c</string>
				</dict>
			</array>
		</dict>
		<key>libc0</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.whitespace.support.function.leading.c0</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>support.function.lib.c0</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(\s*)\b(file_(read|close|eof|readline)|args_(flag|int|string|parse)|parse_(bool|int)|string_(length|charat|join|sub|equal|compare|from(int|bool|char)|tolower|terminated|(to|from)_chararray)|char_(ord|chr)|image_(width|height|create|clone|destroy|subimage|load|save|data))\b</string>
		</dict>
		<key>parens</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.parens.c</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.c0</string>
	<key>uuid</key>
	<string>BABD5E04-580C-408D-9D66-C3759BB9425C</string>
</dict>
</plist>
